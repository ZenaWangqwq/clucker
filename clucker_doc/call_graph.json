{
    "EXTERNAL::ImportError": {
        "uid": "external_ImportError",
        "name": "EXTERNAL::ImportError",
        "content": null,
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::django.contrib.auth.authenticate": {
        "uid": "external_django_contrib_auth_authenticate",
        "name": "EXTERNAL::django.contrib.auth.authenticate",
        "content": null,
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::django.contrib.auth.hashers.check_password": {
        "uid": "external_django_contrib_auth_hashers_check_password",
        "name": "EXTERNAL::django.contrib.auth.hashers.check_password",
        "content": null,
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::django.contrib.auth.login": {
        "uid": "external_django_contrib_auth_login",
        "name": "EXTERNAL::django.contrib.auth.login",
        "content": null,
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::django.contrib.auth.logout": {
        "uid": "external_django_contrib_auth_logout",
        "name": "EXTERNAL::django.contrib.auth.logout",
        "content": null,
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::django.core.asgi.get_asgi_application": {
        "uid": "external_django_core_asgi_get_asgi_application",
        "name": "EXTERNAL::django.core.asgi.get_asgi_application",
        "content": null,
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::django.core.wsgi.get_wsgi_application": {
        "uid": "external_django_core_wsgi_get_wsgi_application",
        "name": "EXTERNAL::django.core.wsgi.get_wsgi_application",
        "content": null,
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::django.shortcuts.redirect": {
        "uid": "external_django_shortcuts_redirect",
        "name": "EXTERNAL::django.shortcuts.redirect",
        "content": null,
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::django.shortcuts.render": {
        "uid": "external_django_shortcuts_render",
        "name": "EXTERNAL::django.shortcuts.render",
        "content": null,
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::django.urls.path": {
        "uid": "external_django_urls_path",
        "name": "EXTERNAL::django.urls.path",
        "content": null,
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::django.urls.reverse": {
        "uid": "external_django_urls_reverse",
        "name": "EXTERNAL::django.urls.reverse",
        "content": null,
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::execute_from_command_line": {
        "uid": "external_execute_from_command_line",
        "name": "EXTERNAL::execute_from_command_line",
        "content": null,
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::faker.Faker": {
        "uid": "external_faker_Faker",
        "name": "EXTERNAL::faker.Faker",
        "content": null,
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::isinstance": {
        "uid": "external_isinstance",
        "name": "EXTERNAL::isinstance",
        "content": null,
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::len": {
        "uid": "external_len",
        "name": "EXTERNAL::len",
        "content": null,
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::list": {
        "uid": "external_list",
        "name": "EXTERNAL::list",
        "content": null,
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::pathlib.Path": {
        "uid": "external_pathlib_Path",
        "name": "EXTERNAL::pathlib.Path",
        "content": null,
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::print": {
        "uid": "external_print",
        "name": "EXTERNAL::print",
        "content": null,
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::super": {
        "uid": "external_super",
        "name": "EXTERNAL::super",
        "content": null,
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "asgi::(global)": {
        "uid": "node_73257119",
        "name": "asgi::(global)",
        "content": null,
        "callees": [
            "EXTERNAL::django.core.asgi.get_asgi_application"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/clucker/asgi.py"
    },
    "forms::SignUpForm.clean": {
        "uid": "node_1abddc53",
        "name": "forms::SignUpForm.clean",
        "content": "\n\ndef clean(self):\n    super().clean()\n    new_password = self.cleaned_data.get('new_password')\n    password_confirmation = self.cleaned_data.get('password_confirmation')\n    if (new_password != password_confirmation):\n        self.add_error('password_confirmation', 'Confirmation does not match the password.')\n",
        "callees": [
            "EXTERNAL::super",
            "forms::SignUpForm.clean"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/forms.py"
    },
    "forms::SignUpForm.save": {
        "uid": "node_7605b91e",
        "name": "forms::SignUpForm.save",
        "content": "\n\ndef save(self):\n    super().save(commit=False)\n    user = User.objects.create_user(self.cleaned_data.get('username'), first_name=self.cleaned_data.get('first_name'), last_name=self.cleaned_data.get('last_name'), email=self.cleaned_data.get('email'), bio=self.cleaned_data.get('bio'), password=self.cleaned_data.get('new_password'))\n    return user\n",
        "callees": [
            "EXTERNAL::super",
            "forms::SignUpForm.save"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/forms.py"
    },
    "helpers::LogInTester._is_logged_in": {
        "uid": "node_a2244f2c",
        "name": "helpers::LogInTester._is_logged_in",
        "content": "\n\ndef _is_logged_in(self):\n    return ('_auth_user_id' in self.client.session.keys())\n",
        "callees": [],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/helpers.py"
    },
    "manage::(global)": {
        "uid": "node_b062f026",
        "name": "manage::(global)",
        "content": null,
        "callees": [
            "manage::main"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/manage.py"
    },
    "manage::main": {
        "uid": "node_db64cbfb",
        "name": "manage::main",
        "content": "\n\ndef main():\n    'Run administrative tasks.'\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'clucker.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)\n",
        "callees": [
            "EXTERNAL::ImportError",
            "EXTERNAL::execute_from_command_line"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/manage.py"
    },
    "seed::Command.__init__": {
        "uid": "node_818bc5fb",
        "name": "seed::Command.__init__",
        "content": "\n\ndef __init__(self):\n    super().__init__()\n    self.faker = Faker('en_GB')\n",
        "callees": [
            "EXTERNAL::faker.Faker",
            "EXTERNAL::super",
            "seed::Command.__init__"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/management/commands/seed.py"
    },
    "seed::Command.handle": {
        "uid": "node_63689c8d",
        "name": "seed::Command.handle",
        "content": "\n\ndef handle(self, *args, **options):\n    print('WARINING')\n",
        "callees": [
            "EXTERNAL::print"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/management/commands/seed.py"
    },
    "settings::(global)": {
        "uid": "node_3b89ac48",
        "name": "settings::(global)",
        "content": null,
        "callees": [
            "EXTERNAL::pathlib.Path"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/clucker/settings.py"
    },
    "test_log_in_form::LogInFormTestCase.test_forms_contains_required_fields": {
        "uid": "node_99bd830b",
        "name": "test_log_in_form::LogInFormTestCase.test_forms_contains_required_fields",
        "content": "\n\ndef test_forms_contains_required_fields(self):\n    form = LogInForm()\n    self.assertIn('username', form.fields)\n    self.assertIn('password', form.fields)\n    password_field = form.fields['password']\n    self.assertTrue(isinstance(password_field.widget, forms.PasswordInput))\n",
        "callees": [
            "EXTERNAL::isinstance"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_log_in_form.py"
    },
    "test_log_in_view::SignUpViewTestCase.setUp": {
        "uid": "node_5d96f935",
        "name": "test_log_in_view::SignUpViewTestCase.setUp",
        "content": "\n\ndef setUp(self):\n    self.url = reverse('log_in')\n    self.user = User.objects.create_user('@janedoe', first_name='Jane', last_name='Doe', email='janedoe@example.com', bio='Hello, I am Jane Doe.', password='Password123', is_active=True)\n",
        "callees": [
            "EXTERNAL::django.urls.reverse"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_log_in_view.py"
    },
    "test_log_in_view::SignUpViewTestCase.test_get_log_in": {
        "uid": "node_c1d63144",
        "name": "test_log_in_view::SignUpViewTestCase.test_get_log_in",
        "content": "\n\ndef test_get_log_in(self):\n    response = self.client.get(self.url)\n    self.assertEqual(response.status_code, 200)\n    self.assertTemplateUsed(response, 'log_in.html')\n    form = response.context['form']\n    self.assertTrue(isinstance(form, LogInForm))\n    self.assertFalse(form.is_bound)\n    messages_list = list(response.context['messages'])\n    self.assertEqual(len(messages_list), 0)\n",
        "callees": [
            "EXTERNAL::isinstance",
            "EXTERNAL::len",
            "EXTERNAL::list"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_log_in_view.py"
    },
    "test_log_in_view::SignUpViewTestCase.test_succesful_log_in": {
        "uid": "node_e1eee55d",
        "name": "test_log_in_view::SignUpViewTestCase.test_succesful_log_in",
        "content": "\n\ndef test_succesful_log_in(self):\n    form_input = {'username': '@janedoe', 'password': 'Password123'}\n    response = self.client.post(self.url, form_input, follow=True)\n    self.assertTrue(self._is_logged_in())\n    response_url = reverse('feed')\n    self.assertRedirects(response, response_url, status_code=302, target_status_code=200)\n    self.assertTemplateUsed(response, 'feed.html')\n    messages_list = list(response.context['messages'])\n    self.assertEqual(len(messages_list), 0)\n",
        "callees": [
            "EXTERNAL::django.urls.reverse",
            "EXTERNAL::len",
            "EXTERNAL::list",
            "helpers::LogInTester._is_logged_in"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_log_in_view.py"
    },
    "test_log_in_view::SignUpViewTestCase.test_unsuccesful_log_in": {
        "uid": "node_3cb317dd",
        "name": "test_log_in_view::SignUpViewTestCase.test_unsuccesful_log_in",
        "content": "\n\ndef test_unsuccesful_log_in(self):\n    form_input = {'username': '@janedoe', 'password': 'WrongPassword123'}\n    response = self.client.post(self.url, form_input)\n    self.assertEqual(response.status_code, 200)\n    self.assertTemplateUsed(response, 'log_in.html')\n    form = response.context['form']\n    self.assertTrue(isinstance(form, LogInForm))\n    self.assertFalse(form.is_bound)\n    self.assertFalse(self._is_logged_in())\n    messages_list = list(response.context['messages'])\n    self.assertEqual(len(messages_list), 1)\n    self.assertEqual(messages_list[0].level, messages.ERROR)\n",
        "callees": [
            "EXTERNAL::isinstance",
            "EXTERNAL::len",
            "EXTERNAL::list",
            "helpers::LogInTester._is_logged_in"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_log_in_view.py"
    },
    "test_log_in_view::SignUpViewTestCase.test_valid_log_in_by_inactive_user": {
        "uid": "node_236794e9",
        "name": "test_log_in_view::SignUpViewTestCase.test_valid_log_in_by_inactive_user",
        "content": "\n\ndef test_valid_log_in_by_inactive_user(self):\n    self.user.is_active = False\n    self.user.save()\n    form_input = {'username': '@janedoe', 'password': 'Password123'}\n    response = self.client.post(self.url, form_input, follow=True)\n    self.assertEqual(response.status_code, 200)\n    self.assertTemplateUsed(response, 'log_in.html')\n    form = response.context['form']\n    self.assertTrue(isinstance(form, LogInForm))\n    self.assertFalse(form.is_bound)\n    self.assertFalse(self._is_logged_in())\n    messages_list = list(response.context['messages'])\n    self.assertEqual(len(messages_list), 1)\n    self.assertEqual(messages_list[0].level, messages.ERROR)\n",
        "callees": [
            "EXTERNAL::isinstance",
            "EXTERNAL::len",
            "EXTERNAL::list",
            "forms::SignUpForm.save",
            "helpers::LogInTester._is_logged_in"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_log_in_view.py"
    },
    "test_log_out_view::LogOutViewTestCase.setUp": {
        "uid": "node_1f7e325d",
        "name": "test_log_out_view::LogOutViewTestCase.setUp",
        "content": "\n\ndef setUp(self):\n    self.url = reverse('log_out')\n    self.user = User.objects.create_user('@janedoe', first_name='Jane', last_name='Doe', email='janedoe@example.com', bio='Hello, I am Jane Doe.', password='Password123', is_active=True)\n",
        "callees": [
            "EXTERNAL::django.urls.reverse"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_log_out_view.py"
    },
    "test_log_out_view::LogOutViewTestCase.test_get_lot_out": {
        "uid": "node_b9bf5a75",
        "name": "test_log_out_view::LogOutViewTestCase.test_get_lot_out",
        "content": "\n\ndef test_get_lot_out(self):\n    self.client.login(username='@janedoe', password='Password123')\n    self.assertTrue(self._is_logged_in())\n    response = self.client.get(self.url, follow=True)\n    response_url = reverse('home')\n    self.assertRedirects(response, response_url, status_code=302, target_status_code=200)\n    self.assertTemplateUsed(response, 'home.html')\n    self.assertFalse(self._is_logged_in())\n",
        "callees": [
            "EXTERNAL::django.urls.reverse",
            "helpers::LogInTester._is_logged_in",
            "helpers::LogInTester._is_logged_in"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_log_out_view.py"
    },
    "test_sign_up_form::SignUpFormTestCase.test_form_has_necessary_fields": {
        "uid": "node_d3beed4f",
        "name": "test_sign_up_form::SignUpFormTestCase.test_form_has_necessary_fields",
        "content": "\n\ndef test_form_has_necessary_fields(self):\n    form = SignUpForm()\n    self.assertIn('first_name', form.fields)\n    self.assertIn('last_name', form.fields)\n    self.assertIn('username', form.fields)\n    self.assertIn('email', form.fields)\n    email_field = form.fields['email']\n    self.assertTrue(isinstance(email_field, forms.EmailField))\n    self.assertIn('bio', form.fields)\n    self.assertIn('new_password', form.fields)\n    new_password_widget = form.fields['new_password'].widget\n    self.assertTrue(isinstance(new_password_widget, forms.PasswordInput))\n    self.assertIn('password_confirmation', form.fields)\n    password_confirmation_widghet = form.fields['password_confirmation'].widget\n    self.assertTrue(isinstance(password_confirmation_widghet, forms.PasswordInput))\n",
        "callees": [
            "EXTERNAL::isinstance",
            "EXTERNAL::isinstance",
            "EXTERNAL::isinstance"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_sign_up_form.py"
    },
    "test_sign_up_form::SignUpFormTestCase.test_successful_sign_up": {
        "uid": "node_93536132",
        "name": "test_sign_up_form::SignUpFormTestCase.test_successful_sign_up",
        "content": "\n\ndef test_successful_sign_up(self):\n    form = SignUpForm(data=self.form_input)\n    before_count = User.objects.count()\n    form.save()\n    after_count = User.objects.count()\n    self.assertEqual(before_count, (after_count - 1))\n    user = User.objects.get(username='@janedoe')\n    self.assertTrue(user.first_name, 'Jane')\n    self.assertTrue(user.last_name, 'Doe')\n    self.assertTrue(user.email, 'janedoe@example.org')\n    self.assertTrue(user.bio, 'My bio')\n    is_password_correct = check_password('Password123', user.password)\n    self.assertTrue(is_password_correct)\n",
        "callees": [
            "EXTERNAL::django.contrib.auth.hashers.check_password",
            "forms::SignUpForm.save"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_sign_up_form.py"
    },
    "test_sign_up_view::SignUpViewTestCase.setUp": {
        "uid": "node_f9aaaedb",
        "name": "test_sign_up_view::SignUpViewTestCase.setUp",
        "content": "\n\ndef setUp(self):\n    self.url = reverse('sign_up')\n    self.form_input = {'first_name': 'Jane', 'last_name': 'Doe', 'username': '@janedoe', 'email': 'janedoe@example.org', 'bio': 'My bio', 'new_password': 'Password123', 'password_confirmation': 'Password123'}\n",
        "callees": [
            "EXTERNAL::django.urls.reverse"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_sign_up_view.py"
    },
    "test_sign_up_view::SignUpViewTestCase.test_get_sign_up": {
        "uid": "node_4a4eee8a",
        "name": "test_sign_up_view::SignUpViewTestCase.test_get_sign_up",
        "content": "\n\ndef test_get_sign_up(self):\n    response = self.client.get(self.url)\n    self.assertEqual(response.status_code, 200)\n    self.assertTemplateUsed(response, 'sign_up.html')\n    form = response.context['form']\n    self.assertTrue(isinstance(form, SignUpForm))\n    self.assertFalse(form.is_bound)\n",
        "callees": [
            "EXTERNAL::isinstance"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_sign_up_view.py"
    },
    "test_sign_up_view::SignUpViewTestCase.test_successful_sign_up": {
        "uid": "node_54cc0c55",
        "name": "test_sign_up_view::SignUpViewTestCase.test_successful_sign_up",
        "content": "\n\ndef test_successful_sign_up(self):\n    before_count = User.objects.count()\n    response = self.client.post(self.url, self.form_input, follow=True)\n    after_count = User.objects.count()\n    self.assertEqual(before_count, (after_count - 1))\n    response_url = reverse('feed')\n    self.assertRedirects(response, response_url, status_code=302, target_status_code=200)\n    self.assertTemplateUsed(response, 'feed.html')\n    user = User.objects.get(username='@janedoe')\n    self.assertTrue(user.first_name, 'Jane')\n    self.assertTrue(user.last_name, 'Doe')\n    self.assertTrue(user.email, 'janedoe@example.org')\n    self.assertTrue(user.bio, 'My bio')\n    is_password_correct = check_password('Password123', user.password)\n    self.assertTrue(is_password_correct)\n    self.assertTrue(self._is_logged_in())\n",
        "callees": [
            "EXTERNAL::django.contrib.auth.hashers.check_password",
            "EXTERNAL::django.urls.reverse",
            "helpers::LogInTester._is_logged_in"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_sign_up_view.py"
    },
    "test_sign_up_view::SignUpViewTestCase.test_unsuccessful_sign_up": {
        "uid": "node_2b9b6ff4",
        "name": "test_sign_up_view::SignUpViewTestCase.test_unsuccessful_sign_up",
        "content": "\n\ndef test_unsuccessful_sign_up(self):\n    self.form_input['username'] = 'BAD_USERNAME'\n    before_count = User.objects.count()\n    response = self.client.post(self.url, self.form_input)\n    after_count = User.objects.count()\n    self.assertEqual(before_count, after_count)\n    self.assertEqual(response.status_code, 200)\n    self.assertTemplateUsed(response, 'sign_up.html')\n    form = response.context['form']\n    self.assertTrue(isinstance(form, SignUpForm))\n    self.assertTrue(form.is_bound)\n    self.assertFalse(self._is_logged_in())\n",
        "callees": [
            "EXTERNAL::isinstance",
            "helpers::LogInTester._is_logged_in"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_sign_up_view.py"
    },
    "test_user_model::UserModelTestCase._assert_right": {
        "uid": "node_b0e23c40",
        "name": "test_user_model::UserModelTestCase._assert_right",
        "content": "\n\ndef _assert_right(self):\n    try:\n        self.user.full_clean()\n    except ValidationError:\n        self.fail('Test user should be valid')\n",
        "callees": [],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_user_model.py"
    },
    "test_user_model::UserModelTestCase._assert_wrong": {
        "uid": "node_b62f6474",
        "name": "test_user_model::UserModelTestCase._assert_wrong",
        "content": "\n\ndef _assert_wrong(self):\n    with self.assertRaises(ValidationError):\n        self.user.full_clean()\n",
        "callees": [],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_user_model.py"
    },
    "test_user_model::UserModelTestCase.test_user_should_be_unique": {
        "uid": "node_5211a041",
        "name": "test_user_model::UserModelTestCase.test_user_should_be_unique",
        "content": "\n\ndef test_user_should_be_unique(self):\n    user = User.objects.create_user('@zemei', first_name='Zemei', last_name='Wang', email='111111@qq.com', password='8888password', bio='This is Zemei profile.')\n    self.user.username = '@zemei'\n    self._assert_wrong()\n",
        "callees": [
            "test_user_model::UserModelTestCase._assert_wrong"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_user_model.py"
    },
    "test_user_model::UserModelTestCase.test_username_can_be_30_characters_long": {
        "uid": "node_b722fc08",
        "name": "test_user_model::UserModelTestCase.test_username_can_be_30_characters_long",
        "content": "\n\ndef test_username_can_be_30_characters_long(self):\n    self.user.username = ('@' + ('x' * 29))\n    self._assert_right()\n",
        "callees": [
            "test_user_model::UserModelTestCase._assert_right"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_user_model.py"
    },
    "test_user_model::UserModelTestCase.test_username_cannot_be_blank": {
        "uid": "node_ef8ea230",
        "name": "test_user_model::UserModelTestCase.test_username_cannot_be_blank",
        "content": "\n\ndef test_username_cannot_be_blank(self):\n    self.user.username = ''\n    self._assert_wrong()\n",
        "callees": [
            "test_user_model::UserModelTestCase._assert_wrong"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_user_model.py"
    },
    "test_user_model::UserModelTestCase.test_username_cannot_be_over_30_characters_long": {
        "uid": "node_fec4273a",
        "name": "test_user_model::UserModelTestCase.test_username_cannot_be_over_30_characters_long",
        "content": "\n\ndef test_username_cannot_be_over_30_characters_long(self):\n    self.user.username = ('@' + ('x' * 30))\n    self._assert_wrong()\n",
        "callees": [
            "test_user_model::UserModelTestCase._assert_wrong"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_user_model.py"
    },
    "test_user_model::UserModelTestCase.test_username_length_must_be_at_least_3": {
        "uid": "node_524b12c4",
        "name": "test_user_model::UserModelTestCase.test_username_length_must_be_at_least_3",
        "content": "\n\ndef test_username_length_must_be_at_least_3(self):\n    self.user.username = '@as'\n    self._assert_wrong()\n",
        "callees": [
            "test_user_model::UserModelTestCase._assert_wrong"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_user_model.py"
    },
    "test_user_model::UserModelTestCase.test_username_may_contain_number": {
        "uid": "node_c96d4a02",
        "name": "test_user_model::UserModelTestCase.test_username_may_contain_number",
        "content": "\n\ndef test_username_may_contain_number(self):\n    self.user.username = '@zemei123'\n    self._assert_right()\n",
        "callees": [
            "test_user_model::UserModelTestCase._assert_right"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_user_model.py"
    },
    "test_user_model::UserModelTestCase.test_username_must_be_contain_only_one_at": {
        "uid": "node_f9453dee",
        "name": "test_user_model::UserModelTestCase.test_username_must_be_contain_only_one_at",
        "content": "\n\ndef test_username_must_be_contain_only_one_at(self):\n    self.user.username = '@@zena'\n    self._assert_wrong()\n",
        "callees": [
            "test_user_model::UserModelTestCase._assert_wrong"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_user_model.py"
    },
    "test_user_model::UserModelTestCase.test_username_must_begin_with_at_symbol": {
        "uid": "node_166a1866",
        "name": "test_user_model::UserModelTestCase.test_username_must_begin_with_at_symbol",
        "content": "\n\ndef test_username_must_begin_with_at_symbol(self):\n    self.user.username = '@zjam!ss'\n    self._assert_wrong()\n",
        "callees": [
            "test_user_model::UserModelTestCase._assert_wrong"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/tests/test_user_model.py"
    },
    "urls::(global)": {
        "uid": "node_012ed38e",
        "name": "urls::(global)",
        "content": null,
        "callees": [
            "EXTERNAL::django.urls.path",
            "EXTERNAL::django.urls.path",
            "EXTERNAL::django.urls.path",
            "EXTERNAL::django.urls.path",
            "EXTERNAL::django.urls.path",
            "EXTERNAL::django.urls.path"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/clucker/urls.py"
    },
    "views::feed": {
        "uid": "node_e7bad3e6",
        "name": "views::feed",
        "content": "\n\ndef feed(request):\n    return render(request, 'feed.html')\n",
        "callees": [
            "EXTERNAL::django.shortcuts.render"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/views.py"
    },
    "views::home": {
        "uid": "node_c497f7c0",
        "name": "views::home",
        "content": "\n\ndef home(request):\n    return render(request, 'home.html')\n",
        "callees": [
            "EXTERNAL::django.shortcuts.render"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/views.py"
    },
    "views::log_in": {
        "uid": "node_3fd8d0e7",
        "name": "views::log_in",
        "content": "\n\ndef log_in(request):\n    if (request.method == 'POST'):\n        form = LogInForm(request.POST)\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            password = form.cleaned_data.get('password')\n            user = authenticate(username=username, password=password)\n            if (user is not None):\n                login(request, user)\n                return redirect('feed')\n        messages.add_message(request, messages.ERROR, 'The credentials provided were invalid!')\n    form = LogInForm()\n    return render(request, 'log_in.html', {'form': form})\n",
        "callees": [
            "EXTERNAL::django.contrib.auth.authenticate",
            "EXTERNAL::django.contrib.auth.login",
            "EXTERNAL::django.shortcuts.redirect",
            "EXTERNAL::django.shortcuts.render"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/views.py"
    },
    "views::log_out": {
        "uid": "node_8df5df18",
        "name": "views::log_out",
        "content": "\n\ndef log_out(request):\n    logout(request)\n    return redirect('home')\n",
        "callees": [
            "EXTERNAL::django.contrib.auth.logout",
            "EXTERNAL::django.shortcuts.redirect"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/views.py"
    },
    "views::sign_up": {
        "uid": "node_0ae6eca2",
        "name": "views::sign_up",
        "content": "\n\ndef sign_up(request):\n    if (request.method == 'POST'):\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('feed')\n    else:\n        form = SignUpForm()\n    return render(request, 'sign_up.html', {'form': form})\n",
        "callees": [
            "EXTERNAL::django.contrib.auth.login",
            "EXTERNAL::django.shortcuts.redirect",
            "EXTERNAL::django.shortcuts.render",
            "forms::SignUpForm.save"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/microblogs/views.py"
    },
    "wsgi::(global)": {
        "uid": "node_fa62bda1",
        "name": "wsgi::(global)",
        "content": null,
        "callees": [
            "EXTERNAL::django.core.wsgi.get_wsgi_application"
        ],
        "file_name": "/home/runner/work/test-repo-copilot/test-repo-copilot/clucker/clucker/wsgi.py"
    }
}