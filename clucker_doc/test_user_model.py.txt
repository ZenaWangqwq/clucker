You are an AI documentation assistant, and your task is to generate documentation based on the given code of an object. The purpose of the documentation is to help developers and beginners understand the function and specific usage of the code.

The path of the document you need to generate in this project is ./../../clucker.
Now you need to generate a document for "test_user_model.py".

The content of the code is as follows:
"""Unit tests of the user model."""
from django.test import TestCase
from microblogs.models import User
from django.core.exceptions import ValidationError

# Unit test goes here.
class UserModelTestCase(TestCase):
    """Unit tests of the User model."""
    def setUp(self):
        self.user = User.objects.create_user(
            '@zena',
            first_name = 'Zena',
            last_name = 'Wang',
            email = "123456@qq.com",
            password = '1234password',
            bio = 'The quick brown fox jumps over the lazy dog.'
        )

    def test_username_cannot_be_blank(self):
        self.user.username = ''
        self._assert_wrong()

    def test_username_can_be_30_characters_long(self):
        self.user.username = '@' + 'x' * 29
        self._assert_right()

    def test_username_cannot_be_over_30_characters_long(self):
        self.user.username = '@' + 'x' * 30
        self._assert_wrong()

    def test_user_should_be_unique(self):
        user = User.objects.create_user(
            '@zemei',
            first_name = 'Zemei',
            last_name = 'Wang',
            email = "111111@qq.com",
            password = '8888password',
            bio = 'This is Zemei profile.'
        )
        self.user.username = '@zemei'
        self._assert_wrong()

    def test_username_must_begin_with_at_symbol(self):
        self.user.username = '@zjam!ss'
        self._assert_wrong()

    def test_username_may_contain_number(self):
        self.user.username = '@zemei123'
        self._assert_right()

    def test_username_length_must_be_at_least_3 (self):
        self.user.username = '@as'
        self._assert_wrong()

    def test_username_must_be_contain_only_one_at (self):
        self.user.username = '@@zena'
        self._assert_wrong()

    def _assert_right(self):
        try:
            self.user.full_clean()
        except (ValidationError):
            self.fail("Test user should be valid")

    def _assert_wrong(self):
        with self.assertRaises(ValidationError):
            self.user.full_clean()


Please note any part of the content you generate SHOULD NOT CONTAIN Markdown hierarchical heading and divider syntax.

The standard format is as follows (If a section does not have any information, you can skip it and move to the next one):

# test_user_model.py

## ClassDef NameOfClass

The function of the class is XXX. (Only code name and one sentence function description are required)

**Attributes**:

- `attribute1` (`type`): Description of the first attribute.

**Functions**:

- `function_name1`(`param1`: `type`) -> `return_type`
    - Parameters:
        - `param1` (`type`): Description of the first parameter.
    - Returns:
        - `return_type`: Description of the return value.

**Called_functions**:

- `function1`(`param1`: `type`) -> `return_type`: Description of what function1 does and what function1 returns.

**Code Description**: The description of this class. (Detailed and CERTAIN code analysis and description)

**Note**: Points to note about the use of the code according to the returns

**Input Example**: 

```
Provide an input example for a specified data type (e.g., list, double, int) and include a detailed explanation.
```

**Output Example**:

```
Provide an output example for a specified data type (e.g., list, double, int) and include a detailed explanation.
```



## FunctionDef NameOfFunction (functions that do not belong to a class but are still present in the file)

The function of the function is XXX. (Only code name and one sentence function description are required)

**Parameters**:

- `param1` (`type`): Description of the first parameter.

**Returns**:

- `return_type`: Description of the return value.

**Called_functions**:

- `function1`(`param1`: `type`) -> `return_type`: Description of what function1 does and what function1 returns.

**Code Description**: The description of this function. (Detailed and CERTAIN code analysis and description)

**Note**: Points to note about the use of the code according to the returns

**Input Example**: 

```
Provide an input example for a specified data type (e.g., list, double, int) and include a detailed explanation.
```

**Output Example**: 

```
Provide an output example for a specified data type (e.g., list, double, int) and include a detailed explanation.
```

Please generate a detailed explanation document for this object based on the code of the target object itself. For the section Called_functions, considering the additional documentation for the functions and classes called within the file:

Function/Class test_user_model::UserModelTestCase._assert_wrong:


def _assert_wrong(self):
    with self.assertRaises(ValidationError):
        self.user.full_clean()


Function/Class test_user_model::UserModelTestCase._assert_right:


def _assert_right(self):
    try:
        self.user.full_clean()
    except ValidationError:
        self.fail('Test user should be valid')


Function/Class test_user_model::UserModelTestCase._assert_wrong:


def _assert_wrong(self):
    with self.assertRaises(ValidationError):
        self.user.full_clean()


Function/Class test_user_model::UserModelTestCase._assert_wrong:


def _assert_wrong(self):
    with self.assertRaises(ValidationError):
        self.user.full_clean()


Function/Class test_user_model::UserModelTestCase._assert_wrong:


def _assert_wrong(self):
    with self.assertRaises(ValidationError):
        self.user.full_clean()


Function/Class test_user_model::UserModelTestCase._assert_right:


def _assert_right(self):
    try:
        self.user.full_clean()
    except ValidationError:
        self.fail('Test user should be valid')


Function/Class test_user_model::UserModelTestCase._assert_wrong:


def _assert_wrong(self):
    with self.assertRaises(ValidationError):
        self.user.full_clean()


Function/Class test_user_model::UserModelTestCase._assert_wrong:


def _assert_wrong(self):
    with self.assertRaises(ValidationError):
        self.user.full_clean()

.
