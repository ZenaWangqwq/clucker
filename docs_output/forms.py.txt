You are an AI documentation assistant. Your task is to update the existing documentation based on the provided changes in the code. 

Now you need to update the document for "forms.py".

**Old Documentation**:
# forms.py

## ClassDef LogInForm

The function of the class is to validate username and password for login purposes.

**Attributes**:

- `username` (`str`): The username entered by the user.
- `password` (`str`): The password entered by the user.

**Functions**:


None

**Code Description**: This class defines a log in form with two attributes: `username` and `password`. It does not contain any specific validation logic.

## ClassDef SignUpForm

The function of the class is to validate and save new user sign up information, including password confirmation.

**Attributes**:

- `first_name` (`str`): The first name of the user.
- `last_name` (`str`): The last name of the user.
- `username` (`str`): The username chosen by the user.
- `email` (`str`): The email address of the user.
- `bio` (`str`): A bio or description about the user.
- `new_password` (`str`): The new password entered by the user.
- `password_confirmation` (`str`): The confirmation of the new password.

**Functions**:

- **clean**():
    - Parameters: None
    - Returns: None
    - Description: This method validates the form data. It checks if the newly created password matches the password confirmation.
- **save**():
    - Parameters: None
    - Returns: `user` (`User`): The saved user object.
    - Description: This method saves the form data to a new user in the database.

**Called_functions**:

- `super().clean()`: Calls the parent class' clean method for general form validation.
- `super().save(commit=False)`: Calls the parent class' save method without committing the changes to the database.
- `User.objects.create_user()`: Creates and saves a new user in the database.

**Code Description**: This class defines a sign up form that validates and saves user information. It includes password confirmation validation and ensures that the saved password matches the entered password.

**Note**: The code enforces strong password policy by requiring uppercase letters, lowercase letters, and numbers. It also prevents incorrect password confirmation.

**Input Example**: 

```
Input will be a dictionary-like object with attributes like 'first_name', 'last_name', 'username', 'email', 'bio', 'new_password', and 'password_confirmation'.
```

**Output Example**:

```
The output of the save method will be a user object containing all the saved information.
```

**Old Code Content**:
from django import forms
from .models import User
from django.core.validators import RegexValidator

class LogInForm(forms.Form):
    username = forms.CharField(label='Username')
    password = forms.CharField(label='Password',widget=forms.PasswordInput())

class SignUpForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ['first_name', 'last_name', 'username', 'email', 'bio']
        widgets = {'bio': forms.Textarea()}

    new_password = forms.CharField(
        label = 'Password',
        widget = forms.PasswordInput(),
        validators=[RegexValidator(
            regex = r'^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9]).*$',
            message = 'Password must contain uppercase, lowercase letter and number.'
            # RegexValidator(
            #     regex=r'[A-Z]',
            #     message = 'Password must contain capital letter.'
            # ),
            # RegexValidator(
            #     regex=r'[a-z]',
            #     message = 'Password must contain lowercase letter.'
            # ),
            # RegexValidator(
            #     regex=r'[0-9]',
            #     message = 'Password must contain number.'
            # ),
        )]

    )
    password_confirmation = forms.CharField(label = 'Password Confirmation', widget = forms.PasswordInput())

    def clean(self):
        super().clean()
        new_password = self.cleaned_data.get('new_password')
        password_confirmation = self.cleaned_data.get('password_confirmation')
        if(new_password != password_confirmation):
            self.add_error('password_confirmation', 'Confirmation does not match the password.')

    def save(self):
        super().save(commit=False)
        user = User.objects.create_user(
            self.cleaned_data.get('username'),
            first_name = self.cleaned_data.get('first_name'),
            last_name = self.cleaned_data.get('last_name'),
            email = self.cleaned_data.get('email'),
            bio = self.cleaned_data.get('bio'),
            password = self.cleaned_data.get('new_password'),
        )
        return user


**New Code Content**:
from django import forms
from .models import User
from django.core.validators import RegexValidator

class LogInForm(forms.Form):
    username = forms.CharField(label='Username')
    password = forms.CharField(label='Password',widget=forms.PasswordInput())

class SignUpForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ['first_name', 'last_name', 'username', 'email', 'bio', 'birthdate', 'phone']
        widgets = {'bio': forms.Textarea()}

    new_password = forms.CharField(
        label = 'Password',
        widget = forms.PasswordInput(),
        validators=[RegexValidator(
            regex = r'^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9]).*$',
            message = 'Password must contain uppercase, lowercase letter and number.'
            # RegexValidator(
            #     regex=r'[A-Z]',
            #     message = 'Password must contain capital letter.'
            # ),
            # RegexValidator(
            #     regex=r'[a-z]',
            #     message = 'Password must contain lowercase letter.'
            # ),
            # RegexValidator(
            #     regex=r'[0-9]',
            #     message = 'Password must contain number.'
            # ),
        )]

    )
    password_confirmation = forms.CharField(label = 'Password Confirmation', widget = forms.PasswordInput())

    def clean(self):
        super().clean()
        new_password = self.cleaned_data.get('new_password')
        password_confirmation = self.cleaned_data.get('password_confirmation')
        if(new_password != password_confirmation):
            self.add_error('password_confirmation', 'Confirmation does not match the password.')

    def save(self):
        super().save(commit=False)
        user = User.objects.create_user(
            self.cleaned_data.get('username'),
            first_name = self.cleaned_data.get('first_name'),
            last_name = self.cleaned_data.get('last_name'),
            email = self.cleaned_data.get('email'),
            bio = self.cleaned_data.get('bio'),
            password = self.cleaned_data.get('new_password'),
            birthdate = self.cleaned_data.get('birthdate'),
            phone = self.cleaned_data.get('phone'),
        )
        return user


**Diff between Old and New Code**:
--- 

+++ 

@@ -9,7 +9,7 @@

 class SignUpForm(forms.ModelForm):
     class Meta:
         model = User
-        fields = ['first_name', 'last_name', 'username', 'email', 'bio']
+        fields = ['first_name', 'last_name', 'username', 'email', 'bio', 'birthdate', 'phone']
         widgets = {'bio': forms.Textarea()}
 
     new_password = forms.CharField(
@@ -51,5 +51,7 @@

             email = self.cleaned_data.get('email'),
             bio = self.cleaned_data.get('bio'),
             password = self.cleaned_data.get('new_password'),
+            birthdate = self.cleaned_data.get('birthdate'),
+            phone = self.cleaned_data.get('phone'),
         )
         return user

Please update the documentation accordingly, ensuring it accurately reflects the changes. Provide a comprehensive and clear description for any modified or new functions/classes.

**Updated Documentation**:
